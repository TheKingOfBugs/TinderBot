import os
from enum import Enum
from functools import wraps
from typing import Dict
from dotenv import load_dotenv

from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)
from telegram import Update, ParseMode
from gpt import ChatGptService  # –í–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT
from util import (  # –í–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã
    load_message,
    send_photo,
    send_text,
    load_prompt,
    dialog_user_info_to_str,
    send_text_buttons,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")
GPT_TOKEN = os.getenv("CHATGPT_TOKEN")

# –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type_context = ContextTypes.DEFAULT_TYPE


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
class Mode(str, Enum):
    MAIN = "main"
    GPT = "gpt"
    DATE = "date"
    PROFILE = "profile"
    OPENER = "opener"
    MESSAGE = "message"


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserData:
    def __init__(self):
        self.mode: Mode = None
        self.count: int = 0
        self.user_info: Dict = {}
        self.message_history: list = []
        self.current_prompt: str = None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ ChatGPT
chatgpt = ChatGptService(token=GPT_TOKEN)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def error_handler(func):
    @wraps(func)
    async def wrapper(update: Update, context: type_context, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except Exception as e:
            print(f"Error in {func.__name__}: {e}")
            await send_text(update, context, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    return wrapper


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def get_user_data(context: type_context) -> UserData:
    if "user_data" not in context.user_data:
        context.user_data["user_data"] = UserData()
    return context.user_data["user_data"]


def reset_user_data(user_data: UserData):
    user_data.mode = None
    user_data.count = 0
    user_data.user_info.clear()
    user_data.message_history.clear()
    user_data.current_prompt = None


# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async def send_response(
        update: Update,
        context: type_context,
        template_name: str,
        buttons: Dict = None
):
    await send_photo(update, context, template_name)
    text = load_message(template_name)

    if buttons:
        await send_text_buttons(update, context, text, buttons)
    else:
        await send_text(update, context, text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@error_handler
async def start(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.MAIN

    await send_response(update, context, "main")

    await show_main_menu(update, context)


async def show_main_menu(update: Update, context: type_context):
    buttons = {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
        "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
    }
    await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons)


@error_handler
async def gpt(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.GPT
    await send_response(update, context, "gpt")


@error_handler
async def date(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.DATE
    await send_response(
        update,
        context,
        "date",
        buttons={
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏"
        }
    )


@error_handler
async def profile(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.PROFILE
    reset_user_data(user_data)
    await send_response(update, context, "profile")
    await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


@error_handler
async def opener(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.OPENER
    reset_user_data(user_data)
    await send_response(update, context, "opener")
    await send_text(update, context, "–ò–º—è –¥–µ–≤—É—à–∫–∏?")


@error_handler
async def message(update: Update, context: type_context):
    user_data = get_user_data(context)
    user_data.mode = Mode.MESSAGE
    reset_user_data(user_data)
    await send_response(
        update,
        context,
        "message",
        buttons={
            "message_next": "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        }
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@error_handler
async def date_button(update: Update, context: type_context):
    query = update.callback_query
    await query.answer()

    user_data = get_user_data(context)
    user_data.current_prompt = query.data

    await send_photo(update, context, query.data)
    await send_text(
        update,
        context,
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ü–∞—Ä–Ω—è) –Ω–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode=ParseMode.HTML
    )


@error_handler
async def message_button(update: Update, context: type_context):
    query = update.callback_query
    await query.answer()

    user_data = get_user_data(context)
    prompt = load_prompt(query.data)

    user_chat_history = "\n\n".join(user_data.message_history)
    answer = await chatgpt.send_question(prompt, user_chat_history)

    await send_text(update, context, answer)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
@error_handler
async def handle_message(update: Update, context: type_context):
    user_data = get_user_data(context)
    text = update.message.text

    if user_data.mode == Mode.GPT:
        await handle_gpt_dialog(update, context, text)
    elif user_data.mode == Mode.DATE:
        await handle_date_dialog(update, context, text)
    elif user_data.mode == Mode.PROFILE:
        await handle_profile_dialog(update, context, text)
    elif user_data.mode == Mode.OPENER:
        await handle_opener_dialog(update, context, text)
    elif user_data.mode == Mode.MESSAGE:
        await handle_message_dialog(update, context, text)
    else:
        await handle_default_response(update, context, text)


async def handle_gpt_dialog(update: Update, context: type_context, text: str):
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, context, answer)


async def handle_date_dialog(update: Update, context: type_context, text: str):
    user_data = get_user_data(context)
    user_data.message_history.append(text)

    if len(user_data.message_history) >= 5:
        prompt = load_prompt(user_data.current_prompt)
        history = "\n".join(user_data.message_history[-5:])
        answer = await chatgpt.send_question(prompt, history)
        await send_text(update, context, answer)
        reset_user_data(user_data)
    else:
        await send_text(update, context, f"–°–æ–æ–±—â–µ–Ω–∏–µ {len(user_data.message_history)}/5 –ø—Ä–∏–Ω—è—Ç–æ!")


async def handle_profile_dialog(update: Update, context: type_context, text: str):
    user_data = get_user_data(context)

    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"),
        ("occupation", "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?"),
        ("hobby", "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?", "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?"),
        ("annoys", "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?", "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?"),
        ("goals", "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", None),
    ]

    if user_data.count < len(questions):
        key, current_question, next_question = questions[user_data.count]
        user_data.user_info[key] = text
        user_data.count += 1

        if next_question:
            await send_text(update, context, next_question)
        else:
            prompt = load_prompt("profile")
            user_info_str = dialog_user_info_to_str(user_data.user_info)
            answer = await chatgpt.send_question(prompt, user_info_str)
            await send_text(update, context, answer)
            reset_user_data(user_data)


async def handle_opener_dialog(update: Update, context: type_context, text: str):
    user_data = get_user_data(context)

    questions = [
        ("name", "–ò–º—è –¥–µ–≤—É—à–∫–∏?", "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?"),
        ("age", "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?", "–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?"),
        ("looks_score", "–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?", "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?"),
        ("occupation", "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?", "–ß—Ç–æ –≤–∞–º –≤ –Ω–µ–π –Ω—Ä–∞–≤–∏—Ç—Å—è?"),
        ("likes", "–ß—Ç–æ –≤–∞–º –≤ –Ω–µ–π –Ω—Ä–∞–≤–∏—Ç—Å—è?", None),
    ]

    if user_data.count < len(questions):
        key, current_question, next_question = questions[user_data.count]
        user_data.user_info[key] = text
        user_data.count += 1

        if next_question:
            await send_text(update, context, next_question)
        else:
            prompt = load_prompt("opener")
            user_info_str = dialog_user_info_to_str(user_data.user_info)
            answer = await chatgpt.send_question(prompt, user_info_str)
            await send_text(update, context, answer)
            reset_user_data(user_data)


async def handle_message_dialog(update: Update, context: type_context, text: str):
    user_data = get_user_data(context)
    user_data.message_history.append(text)
    await send_text(update, context, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏")


async def handle_default_response(update: Update, context: type_context, text: str):
    await send_text(update, context, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å üòä")
    await send_photo(update, context, "avatar_main")
    await show_main_menu(update, context)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TG_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = [
    CommandHandler("start", start),
    CommandHandler("gpt", gpt),
    CommandHandler("date", date),
    CommandHandler("profile", profile),
    CommandHandler("opener", opener),
    CommandHandler("message", message),
    CallbackQueryHandler(date_button, pattern="^date_.*"),
    CallbackQueryHandler(message_button, pattern="^message_.*"),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
]

for handler in handlers:
    app.add_handler(handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()